import os
import json
import traceback
from datetime import datetime
from rich.console import Console
import textwrap
from typing import Optional, Dict, Any, List, Union, Tuple
import tempfile
import sys
import os

<<<<<<< HEAD
from src.utils import TaskCounter
from src.messages_meta_data_manager import MessagesWithMetaData, MessageMetaData
=======
from .utils import TaskCounter
from .messages_meta_data_manager import MessagesWithMetaData, MessageMetaData
>>>>>>> 9b86492a921bdbc53d91ce090f848113d7925862


class DebugTracer:
    """
    –¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å LLM.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –≤—ã–≤–æ–¥: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏
    –Ω–∞–¥–µ–∂–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSONL-—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    """

    def __init__(
        self,
        log_folder: str = "../logs",
        enable_console: bool = True,
        max_file_size: int = 10 * 1024 * 1024,
        console_preview_length: int = 75,
        messages_meta_data: Optional[MessagesWithMetaData] = None,
        debug_numbering: bool = False,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

        :param log_folder: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤. –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
                          —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å.
        :param enable_console: –í–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å.
        :param max_file_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ —Ä–æ—Ç–∞—Ü–∏–∏ (–≤ –±–∞–π—Ç–∞—Ö).
        :param console_preview_length: –î–ª–∏–Ω–∞ –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏.
        :param messages_meta_data: –û–±—ä–µ–∫—Ç MessagesWithMetaData –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á.
        :param debug_numbering: –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
        :raises IOError: –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤.
        """
        try:
            abs_log_folder = os.path.abspath(log_folder)
            os.makedirs(abs_log_folder, exist_ok=True)

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.log_file_base = os.path.join(abs_log_folder, f"recursion_{timestamp}")
            self.log_file = f"{self.log_file_base}.jsonl"

        except (IOError, PermissionError) as e:
            temp_dir = tempfile.gettempdir()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {log_folder}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.log_file_base = os.path.join(temp_dir, f"recursion_{timestamp}")
            self.log_file = f"{self.log_file_base}.jsonl"

        self.file_counter = 0
        self.max_file_size = max_file_size
        self.console_preview_length = console_preview_length
        self.messages_meta_data = messages_meta_data
        self.debug_numbering = debug_numbering

        self.console = Console() if enable_console else None
        self.msg_counter = 0

        self.depth_counters = {}
        self.phase_styles = {
            "Instruction": ("üìã", "bright_white"),
            "Task Statement": ("üìù", "cyan"),
            "Theory": ("üìö", "blue"),
            "Quality Criteria": ("üéØ", "bright_blue"),
            "Solution": ("üîç", "green"),
            "Solution Verification": ("‚úÖ", "yellow"),
            "Strategy Selection": ("üß†", "magenta"),
            "Task Decomposition": ("üß©", "orange3"),
            "Solution Retry": ("üîÑ", "steel_blue"),
            "Solution Continuation": ("‚û°Ô∏è", "dodger_blue"),
            "Final Solution": ("üèÜ", "gold1"),
            "Error": ("‚ö†Ô∏è", "red"),
            "Context": ("üìö", "purple"),
            "Trim Context": ("‚úÇÔ∏è", "yellow"),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π task_counter –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
        self.last_used_task_counter = None
        self.last_hierarchy_id = None
        self.phase_to_hierarchy_map = {}

        if self.console:
            self.console.print(f"[bold green]–¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/] üìä [{timestamp}]")
            self.console.print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: [italic]{self.log_file}[/]")
            if self.messages_meta_data:
                self.console.print(f"[bold cyan]–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å MessagesWithMetaData[/]")
            if self.debug_numbering:
                self.console.print(f"[bold magenta]–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω[/]")

    def set_messages_meta_data(self, messages_meta_data: MessagesWithMetaData) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç MessagesWithMetaData.

        :param messages_meta_data: –û–±—ä–µ–∫—Ç MessagesWithMetaData –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á.
        """
        self.messages_meta_data = messages_meta_data
        if self.console:
            self.console.print(f"[bold cyan]MessagesWithMetaData –æ–±–Ω–æ–≤–ª–µ–Ω[/]")
            if hasattr(messages_meta_data, 'task_counter'):
                self.console.print(f"[cyan]–¢–µ–∫—É—â–∏–π TaskCounter: {messages_meta_data.task_counter.convert_to_str()}[/]")

    def get_current_task_counter(self) -> Optional[TaskCounter]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π TaskCounter –∏–∑ MessagesWithMetaData, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω.

        :return: –û–±—ä–µ–∫—Ç TaskCounter –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        """
        if self.messages_meta_data is None:
            if self.debug_numbering:
                self.console.print("[yellow]get_current_task_counter: messages_meta_data is None[/]")
            return None

        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–∫—É—â–∏–π task_counter (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏)
            # –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
            if hasattr(self.messages_meta_data, 'task_counter'):
                task_counter = self.messages_meta_data.task_counter
                if self.debug_numbering:
                    self.console.print(f"[dim green]get_current_task_counter: {task_counter.convert_to_str()}[/]")
                return task_counter
            else:
                if self.debug_numbering:
                    self.console.print("[yellow]get_current_task_counter: task_counter not found in messages_meta_data[/]")
                return None

        except (AttributeError, IndexError) as e:
            if self.debug_numbering:
                self.console.print(f"[red]get_current_task_counter error: {str(e)}[/]")
            return None

    def find_meta_for_phase(self, phase: str) -> Optional[MessageMetaData]:
        """
        –ò—â–µ—Ç MessageMetaData, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–∞–∑–µ.

        –ú–µ—Ç–æ–¥ –∏—â–µ—Ç —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        –≤ metadata_messages, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é
        –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞.

        :param phase: –§–∞–∑–∞/—ç—Ç–∞–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        :return: –û–±—ä–µ–∫—Ç MessageMetaData –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        if self.messages_meta_data is None or not hasattr(self.messages_meta_data, 'metadata_messages'):
            if self.debug_numbering:
                self.console.print(f"[yellow]find_meta_for_phase({phase}): metadata_messages –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/]")
            return None

        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∞–∑ –∏ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            phase_to_type_mapping = {
                "Task Statement": "Task Statement",
                "Theory": "Theory",
                "Quality Criteria": "Quality Criteria",
                "Solution": "Solution",
                "Solution Verification": "Solution Verification",
                "Strategy Selection": "Strategy Selection",
                "Task Decomposition": "Task Decomposition",
                "Solution Retry": "Solution Retry",
                "Solution Continuation": "Solution Continuation",
                "Final Solution": "Final Solution",
                "Instruction": "Instruction",
                "Error": "Error",
                "Task Integration": "Task Integration",
                "Subtask Start": "Subtask Start",
                "Subtask Complete": "Subtask Complete",
                "Default": None,  # –î–ª—è —Ñ–∞–∑ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
            }

            message_type = phase_to_type_mapping.get(phase, phase)

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∏–ø–æ–º
            found_meta = None
            for i, meta in enumerate(reversed(self.messages_meta_data.metadata_messages)):
                meta_type = getattr(meta, 'type', None)
                if meta_type == message_type:
                    found_meta = meta
                    if self.debug_numbering:
                        status = getattr(meta, 'status', 'unknown')
                        hierarchy = getattr(meta.task_number, 'convert_to_str', lambda: "unknown")()
                        self.console.print(f"[dim cyan]find_meta_for_phase({phase}): –ù–∞–π–¥–µ–Ω–æ [{hierarchy}] {meta_type} [{status}][/]")
                    break

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ phase –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –∫–∞—Ä—Ç–µ —Ñ–∞–∑–∞-–∏–µ—Ä–∞—Ä—Ö–∏—è,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π task_counter –¥–ª—è —ç—Ç–æ–π —Ñ–∞–∑—ã
            if found_meta is None and phase in self.phase_to_hierarchy_map:
                hierarchy_info = self.phase_to_hierarchy_map[phase]
                if self.debug_numbering:
                    self.console.print(f"[yellow]find_meta_for_phase({phase}): –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è: {hierarchy_info}[/]")
                return None  # –ú—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å MessageMetaData, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞

            return found_meta
        except Exception as e:
            if self.debug_numbering:
                self.console.print(f"[red]find_meta_for_phase error: {str(e)}[/]")
                print(traceback.format_exc())
            return None

    def log(
        self,
        depth: int,
        phase: str,
        prompt: str,
        response: str | None = None,
        extra: dict | None = None,
        message_meta: Optional[MessageMetaData] = None,
    ) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM.

        :param depth: –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
        :param phase: –§–∞–∑–∞/—ç—Ç–∞–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
        :param prompt: –ü—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫ LLM.
        :param response: –û—Ç–≤–µ—Ç –æ—Ç LLM (None, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è).
        :param extra: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∫–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ç.–¥.).
        :param message_meta: –û–±—ä–µ–∫—Ç MessageMetaData –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        self._check_file_rotation()

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á–∏
        task_counter, hierarchy_id, meta_status, meta_type = self._determine_hierarchy_for_log(depth, phase, message_meta)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
        entry = {
            "ts": datetime.now().isoformat(),
            "log_type": "interaction",
            "depth": depth,
            "phase": phase,
            "hierarchy": hierarchy_id,
            "msg_id": self.msg_counter,
            "prompt": prompt,
            "prompt_preview": prompt[:self.console_preview_length]
            + ("..." if len(prompt) > self.console_preview_length else ""),
            "prompt_length": len(prompt),
        }

        if meta_status is not None:
            entry["meta_status"] = meta_status
        if meta_type is not None:
            entry["meta_type"] = meta_type

        if task_counter is not None:
            entry["task_counter"] = task_counter.convert_to_str()
            entry["task_order"] = task_counter.get_order()
            if hasattr(task_counter, 'numbers_array'):
                entry["task_numbers"] = task_counter.numbers_array

        try:
            entry["prompt_tokens"] = len(prompt.split())
            if response:
                entry["response_tokens"] = len(response.split())
        except Exception:
            pass

        if response:
            entry["response"] = response
            entry["response_preview"] = response[:self.console_preview_length] + (
                "..." if len(response) > self.console_preview_length else ""
            )
            entry["response_length"] = len(response)

        if extra:
            entry.update(extra)

        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\n")
                f.flush()
        except Exception as e:
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}[/]")
            self.log_error(depth, f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {str(e)}")

        if self.console:
            self._print_to_console(entry)

        self.msg_counter += 1

    def _determine_hierarchy_for_log(
        self, depth: int, phase: str, message_meta: Optional[MessageMetaData] = None
    ) -> Tuple[Optional[TaskCounter], str, Optional[str], Optional[str]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∑–∞–¥–∞—á–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏, –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é –∏–∑
        –º–µ—Ç–æ–¥–∞ log –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞.

        :param depth: –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
        :param phase: –§–∞–∑–∞/—ç—Ç–∞–ø –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
        :param message_meta: –û–±—ä–µ–∫—Ç MessageMetaData –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        :return: –ö–æ—Ä—Ç–µ–∂ (task_counter, hierarchy_id, meta_status, meta_type)
        """
        task_counter = None
        meta_status = None
        meta_type = None

        # –û—Ç–ª–∞–¥–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
        if self.debug_numbering:
            self.console.print(f"[dim]_determine_hierarchy_for_log: phase={phase}, depth={depth}[/]")

        # 1. –ï—Å–ª–∏ message_meta —è–≤–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if message_meta is not None:
            task_counter = getattr(message_meta, 'task_number', None)
            meta_status = getattr(message_meta, 'status', None)
            meta_type = getattr(message_meta, 'type', None)

            if self.debug_numbering and task_counter:
                self.console.print(f"[dim green]–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–≤–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π message_meta: {task_counter.convert_to_str()}[/]")

        # 2. –ï—Å–ª–∏ message_meta –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ —Ñ–∞–∑–µ
        elif self.messages_meta_data is not None:
            found_meta = self.find_meta_for_phase(phase)

            if found_meta is not None:
                task_counter = getattr(found_meta, 'task_number', None)
                meta_status = getattr(found_meta, 'status', None)
                meta_type = getattr(found_meta, 'type', None)

                if self.debug_numbering and task_counter:
                    self.console.print(f"[dim green]–ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MessageMetaData: {task_counter.convert_to_str()}[/]")

            # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω MessageMetaData, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π TaskCounter
            elif hasattr(self.messages_meta_data, 'task_counter'):
                task_counter = self.messages_meta_data.task_counter

                if self.debug_numbering:
                    self.console.print(f"[dim yellow]–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π TaskCounter: {task_counter.convert_to_str()}[/]")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è —Ñ–∞–∑—ã
        if task_counter is None and phase in self.phase_to_hierarchy_map:
            # –î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –¥–ª—è —ç—Ç–æ–π —Ñ–∞–∑—ã
            hierarchy_id = self.phase_to_hierarchy_map[phase]

            if self.debug_numbering:
                self.console.print(f"[dim yellow]–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è —Ñ–∞–∑—ã {phase}: {hierarchy_id}[/]")

            if self.last_used_task_counter is not None:
                task_counter = self.last_used_task_counter

        # 5. –ï—Å–ª–∏ task_counter –≤—Å–µ –µ—â–µ None, –∏ —É –Ω–∞—Å –µ—Å—Ç—å last_used_task_counter
        if task_counter is None and self.last_used_task_counter is not None:
            task_counter = self.last_used_task_counter

            if self.debug_numbering:
                self.console.print(f"[dim yellow]–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π TaskCounter: {task_counter.convert_to_str()}[/]")

        # 6. –ù–∞–∫–æ–Ω–µ—Ü, –ø–æ–ª—É—á–∞–µ–º hierarchy_id –∏–∑ task_counter –∏–ª–∏ fallback
        hierarchy_id = self._get_hierarchy_id(depth, task_counter)

        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π counter –∏ –∏–µ—Ä–∞—Ä—Ö–∏—é
        if task_counter is not None:
            self.last_used_task_counter = task_counter

        self.last_hierarchy_id = hierarchy_id

        # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–∑—ã –∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.phase_to_hierarchy_map[phase] = hierarchy_id

        return task_counter, hierarchy_id, meta_status, meta_type

    def log_error(self, depth: int, error_msg: str, context: str | None = None, message_meta: Optional[MessageMetaData] = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ.

        :param depth: –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
        :param error_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤).
        :param message_meta: –û–±—ä–µ–∫—Ç MessageMetaData –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        extra = {"error": True, "log_type": "error"}
        if context:
            extra["context"] = context

        self.log(depth=depth, phase="Error", prompt=error_msg, extra=extra, message_meta=message_meta)

    def log_messages_context(self, messages_meta_data: Optional[MessagesWithMetaData] = None) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏) –≤ –ª–æ–≥-—Ñ–∞–π–ª.

        :param messages_meta_data: –û–±—ä–µ–∫—Ç MessagesWithMetaData –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
                                 –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.messages_meta_data.
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
        meta_data = messages_meta_data or self.messages_meta_data

        if not meta_data or not hasattr(meta_data, 'metadata_messages'):
            if self.console:
                self.console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π[/]")
            return

        self._check_file_rotation()

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        try:
            header_entry = {
                "ts": datetime.now().isoformat(),
                "log_type": "context_header",
                "description": "–ù–∞—á–∞–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏",
                "messages_count": len(meta_data.metadata_messages),
                "task_counter": meta_data.task_counter.convert_to_str() if hasattr(meta_data, 'task_counter') else "unknown"
            }

            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(header_entry, ensure_ascii=False) + "\n")
                f.flush()

            if self.console:
                self.console.print(f"[bold purple]–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(meta_data.metadata_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π[/]")
        except Exception as e:
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}[/]")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for i, meta_msg in enumerate(meta_data.metadata_messages):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ MessageMetaData
                task_number = meta_msg.task_number
                status = getattr(meta_msg, 'status', 'unknown')
                msg_type = getattr(meta_msg, 'type', 'unknown')
                message = getattr(meta_msg, 'message', {})

                role = message.get('role', 'unknown')
                content = self._extract_content(message.get('content', ''))

                message_entry = {
                    "ts": datetime.now().isoformat(),
                    "log_type": "context_message",
                    "index": i,
                    "role": role,
                    "hierarchy": task_number.convert_to_str() if task_number else "unknown",
                    "task_order": task_number.get_order() if task_number else -1,
                    "task_numbers": task_number.numbers_array if task_number and hasattr(task_number, 'numbers_array') else [],
                    "status": status,
                    "type": msg_type,
                    "content": content,
                    "content_preview": content[:self.console_preview_length] + ("..." if len(content) > self.console_preview_length else ""),
                    "content_length": len(content)
                }

                with open(self.log_file, "a", encoding="utf-8") as f:
                    f.write(json.dumps(message_entry, ensure_ascii=False) + "\n")
                    f.flush()

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å (–∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
                if self.console:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å
                    if i % 5 == 0 or i == len(meta_data.metadata_messages) - 1:
                        self.console.print(f"[dim]–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(meta_data.metadata_messages)}: {role}/{msg_type} [{status}][/]")

            except Exception as e:
                error_info = traceback.format_exc()
                if self.console:
                    self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {e}[/]")

                error_entry = {
                    "ts": datetime.now().isoformat(),
                    "log_type": "context_error",
                    "index": i,
                    "error": str(e),
                    "traceback": error_info
                }

                try:
                    with open(self.log_file, "a", encoding="utf-8") as f:
                        f.write(json.dumps(error_entry, ensure_ascii=False) + "\n")
                        f.flush()
                except:
                    pass

                continue

        try:
            footer_entry = {
                "ts": datetime.now().isoformat(),
                "log_type": "context_footer",
                "description": "–ö–æ–Ω–µ—Ü –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏",
                "processed_messages": len(meta_data.metadata_messages)
            }

            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(footer_entry, ensure_ascii=False) + "\n")
                f.flush()
        except Exception as e:
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}[/]")

    def log_trimmed_messages(self, original_messages: list, trimmed_messages: list) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

        :param original_messages: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        :param trimmed_messages: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self._check_file_rotation()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(original_messages, list) or not isinstance(trimmed_messages, list):
                if self.console:
                    self.console.print("[bold red]–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–∞–º–∏[/]")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            removed_count = len(original_messages) - len(trimmed_messages)

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            if removed_count <= 0:
                if self.console:
                    self.console.print("[dim]–û–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã[/]")
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–µ–∑–∫–µ
            entry = {
                "ts": datetime.now().isoformat(),
                "log_type": "trimmed_context",
                "phase": "Trim Context",
                "original_messages_count": len(original_messages),
                "trimmed_messages_count": len(trimmed_messages),
                "removed_messages_count": removed_count,
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (system –∏–ª–∏ user)
            start_index = 1 if original_messages and len(original_messages) > 0 and original_messages[0].get("role") == "system" else 0

            # –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
            removed_messages = []
            for i in range(start_index, len(original_messages) - len(trimmed_messages) + start_index):
                if i >= len(original_messages):
                    break  # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞

                msg = original_messages[i]
                content = self._extract_content(msg.get("content", ""))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                msg_data = {
                    "index": i,
                    "role": msg.get("role", "unknown"),
                    "content_preview": content[:100] + ("..." if len(content) > 100 else ""),
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if self.messages_meta_data and hasattr(self.messages_meta_data, 'metadata_messages'):
                    if i < len(self.messages_meta_data.metadata_messages):
                        meta_msg = self.messages_meta_data.metadata_messages[i]
                        task_number = getattr(meta_msg, 'task_number', None)
                        msg_data["hierarchy"] = task_number.convert_to_str() if task_number else "unknown"
                        msg_data["status"] = getattr(meta_msg, 'status', 'unknown')
                        msg_data["type"] = getattr(meta_msg, 'type', 'unknown')

                removed_messages.append(msg_data)

            entry["removed_messages"] = removed_messages

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
            roles_summary = {}
            for msg in removed_messages:
                role = msg.get("role", "unknown")
                roles_summary[role] = roles_summary.get(role, 0) + 1

            entry["removed_roles_summary"] = roles_summary

            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\n")
                f.flush()

            if self.console:
                roles_info = ", ".join([f"{count} {role}" for role, count in roles_summary.items()])

                self.console.print(f"[yellow]‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: —É–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π ({roles_info})[/]")

                if removed_count > 5:
                    self.console.print(f"[orange3]‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({removed_count})[/]")

        except Exception as e:
            error_info = traceback.format_exc()
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–µ–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}[/]")

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            error_entry = {
                "ts": datetime.now().isoformat(),
                "log_type": "trim_context_error",
                "error": str(e),
                "traceback": error_info
            }

            try:
                with open(self.log_file, "a", encoding="utf-8") as f:
                    f.write(json.dumps(error_entry, ensure_ascii=False) + "\n")
                    f.flush()
            except:
                pass

    def log_task_counter_state(self, depth: int = 0, extra: Dict[str, Any] = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TaskCounter –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á.

        :param depth: –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è).
        :param extra: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        if self.messages_meta_data is None or not hasattr(self.messages_meta_data, 'task_counter'):
            if self.console:
                self.console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å TaskCounter: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç[/]")
            return

        task_counter = self.messages_meta_data.task_counter

        try:
            entry = {
                "ts": datetime.now().isoformat(),
                "log_type": "task_counter",
                "depth": depth,
                "hierarchy": task_counter.convert_to_str(),
                "task_order": task_counter.get_order(),
                "task_numbers": task_counter.numbers_array if hasattr(task_counter, 'numbers_array') else []
            }

            if extra:
                entry.update(extra)

            self._check_file_rotation()

            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\n")
                f.flush()

            if self.console:
                self.console.print(f"[cyan]TaskCounter: {task_counter.convert_to_str()} (—É—Ä–æ–≤–µ–Ω—å: {task_counter.get_order()})[/]")
        except Exception as e:
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ TaskCounter: {e}[/]")

    def log_context_to_file(self, file_name: Optional[str] = None) -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

        :param file_name: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è.
        :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        if self.messages_meta_data is None or not hasattr(self.messages_meta_data, 'metadata_messages'):
            if self.console:
                self.console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π[/]")
            return None

        try:
            if file_name is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                file_name = f"context_{timestamp}.json"

            log_dir = os.path.dirname(self.log_file)
            context_file_path = os.path.join(log_dir, file_name)

            context_data = {
                "timestamp": datetime.now().isoformat(),
                "task_counter": {
                    "value": self.messages_meta_data.task_counter.convert_to_str() if hasattr(self.messages_meta_data, 'task_counter') else "unknown",
                    "order": self.messages_meta_data.task_counter.get_order() if hasattr(self.messages_meta_data, 'task_counter') else -1,
                    "numbers": self.messages_meta_data.task_counter.numbers_array if hasattr(self.messages_meta_data, 'task_counter') and hasattr(self.messages_meta_data.task_counter, 'numbers_array') else []
                },
                "messages": []
            }

            for meta_msg in self.messages_meta_data.metadata_messages:
                task_number = meta_msg.task_number
                status = getattr(meta_msg, 'status', 'unknown')
                msg_type = getattr(meta_msg, 'type', 'unknown')
                message = getattr(meta_msg, 'message', {})

                role = message.get('role', 'unknown')
                content = self._extract_content(message.get('content', ''))

                message_data = {
                    "role": role,
                    "hierarchy": task_number.convert_to_str() if task_number else "unknown",
                    "task_order": task_number.get_order() if task_number else -1,
                    "status": status,
                    "type": msg_type,
                    "content": content,
                    "content_length": len(content)
                }

                context_data["messages"].append(message_data)

            with open(context_file_path, "w", encoding="utf-8") as f:
                json.dump(context_data, f, ensure_ascii=False, indent=2)

            if self.console:
                self.console.print(f"[bold green]–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {context_file_path}[/]")

            return context_file_path
        except Exception as e:
            error_info = traceback.format_exc()
            if self.console:
                self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª: {e}[/]")
                self.console.print(f"[dim red]{error_info}[/]")
            return None

    def _check_file_rotation(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
        """
        try:
            if os.path.exists(self.log_file) and os.path.getsize(self.log_file) > self.max_file_size:
                self.file_counter += 1
                self.log_file = f"{self.log_file_base}_{self.file_counter}.jsonl"
                if self.console:
                    self.console.print(f"[italic yellow]–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {self.log_file}[/]")
        except Exception as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try:
                directory = os.path.dirname(self.log_file)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.log_file = os.path.join(directory, f"recursion_recovery_{timestamp}.jsonl")
                if self.console:
                    self.console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {self.log_file}[/]")
            except:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.log_file = os.path.join(tempfile.gettempdir(), f"recursion_emergency_{timestamp}.jsonl")
                if self.console:
                    self.console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.log_file}[/]")

    def _get_hierarchy_id(self, depth: int, task_counter: Optional[TaskCounter] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π ID –≤–∏–¥–∞ '1.2.3', '–ò—Å—Ö–æ–¥–Ω–∞—è' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TaskCounter.

        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏:
        1. –ï—Å–ª–∏ task_counter –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ convert_to_str)
        2. –ï—Å–ª–∏ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–Ω–∞
        3. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π hierarchy_id, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–Ω
        4. –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ depth_counters

        :param depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
        :param task_counter: –û–±—ä–µ–∫—Ç TaskCounter –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω).
        :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2.3" –∏–ª–∏ "–ò—Å—Ö–æ–¥–Ω–∞—è").
        """
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω task_counter, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        if task_counter is not None:
            try:
                hierarchy_id = task_counter.convert_to_str()

                if self.debug_numbering:
                    self.console.print(f"[dim green]_get_hierarchy_id: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TaskCounter: {hierarchy_id}[/]")

                return hierarchy_id
            except Exception as e:
                if self.debug_numbering:
                    self.console.print(f"[yellow]_get_hierarchy_id: –æ—à–∏–±–∫–∞ TaskCounter: {str(e)}[/]")

        # –ï—Å–ª–∏ –µ—Å—Ç—å last_hierarchy_id –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.last_hierarchy_id is not None:
            if self.debug_numbering:
                self.console.print(f"[dim yellow]_get_hierarchy_id: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è last_hierarchy_id: {self.last_hierarchy_id}[/]")

            return self.last_hierarchy_id

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ depth
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ depth
        depths_to_reset = [d for d in self.depth_counters.keys() if d > depth]
        for d in depths_to_reset:
            del self.depth_counters[d]

        if depth not in self.depth_counters:
            self.depth_counters[depth] = 1
        else:
            self.depth_counters[depth] += 1

        # –ï—Å–ª–∏ depth = 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ò—Å—Ö–æ–¥–Ω–∞—è"
        if depth == 0:
            if self.debug_numbering:
                self.console.print(f"[dim yellow]_get_hierarchy_id: depth=0, –∏–µ—Ä–∞—Ä—Ö–∏—è='–ò—Å—Ö–æ–¥–Ω–∞—è'[/]")
            return "–ò—Å—Ö–æ–¥–Ω–∞—è"

        # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ depth_counters
        hierarchy = []
        for d in range(1, depth + 1):
            hierarchy.append(str(self.depth_counters.get(d, 1)))

        hierarchy_id = ".".join(hierarchy)

        if self.debug_numbering:
            self.console.print(f"[dim yellow]_get_hierarchy_id: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è: {hierarchy_id}[/]")

        return hierarchy_id

    def _extract_content(self, content) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫).
        :return: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        if isinstance(content, str):
            return content

        if isinstance(content, list):
            text_parts = []
            for item in content:
                if isinstance(item, dict) and item.get("type") == "text":
                    text_parts.append(item.get("text", ""))
            return "\n".join(text_parts)

        return str(content)

    def _get_task_info_display(self, entry: Dict[str, Any]) -> Tuple[str, str]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –≤ –∫–æ–Ω—Å–æ–ª–∏.

        :param entry: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏.
        :return: –ö–æ—Ä—Ç–µ–∂ (hierarchy_display, meta_display) —Å —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        hierarchy = entry.get('hierarchy', '')

        if hierarchy == "–ò—Å—Ö–æ–¥–Ω–∞—è":
            hierarchy_display = "[–ò—Å—Ö–æ–¥–Ω–∞—è]"
        else:
            hierarchy_display = f"[{hierarchy}]" if hierarchy else "[]"

        meta_info = []
        if "meta_type" in entry:
            meta_info.append(f"type=\"{entry['meta_type']}\"")
        if "meta_status" in entry:
            meta_info.append(f"status=\"{entry['meta_status']}\"")

        meta_display = f" [{', '.join(meta_info)}]" if meta_info else ""

        return hierarchy_display, meta_display

    def _print_to_console(self, entry: dict) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.

        :param entry: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏.
        """
        if not self.console:
            return

        emoji, color = self.phase_styles.get(entry["phase"], ("‚öôÔ∏è", "white"))
        indent = "   " * entry['depth']

        hierarchy_display, meta_display = self._get_task_info_display(entry)

        header = f"{indent}‚îú‚îÄ‚îÄ {emoji} {hierarchy_display} {entry['phase']}{meta_display}"
        self.console.print(header, style=f"bold {color}")

        if entry.get("error", False):
            error_text = f"{indent}‚îÇ  [bold red]{entry['prompt']}[/]"
            self.console.print(error_text)
            if "context" in entry:
                context_text = f"{indent}‚îÇ  [dim]{entry['context']}[/]"
                self.console.print(context_text)
            return

        console_width = self.console.width

        indent_length = len(indent) + 3  # +3 –¥–ª—è "‚îÇ  "
        available_width = console_width - indent_length

        if "prompt_preview" in entry:
            text = entry['prompt_preview']
            # text = entry['prompt']
            wrapped_lines = textwrap.wrap(text, width=available_width) + ["‚éØ‚éØ‚éØ"]
            for line in wrapped_lines:
                formatted_line = f"{indent}‚îÇ  {line}"
                self.console.print(formatted_line, style="dim")

        if "response_preview" in entry:
            # text = entry['response_preview']
            text = entry['response']
            wrapped_lines = textwrap.wrap(text, width=available_width)
            for line in wrapped_lines:
                formatted_line = f"{indent}‚îÇ  {line}"
                self.console.print(formatted_line, style="dim italic")
